import { Inject, Injectable, NotFoundException } from '@nestjs/common';
import { UserRepository } from 'src/domain/user/repositories/user.repository';
import { UserSettings } from 'src/domain/user/entities/user-settings.entity';

@Injectable()
export class UpdateUserSettingsUseCase {
  constructor(
    @Inject('UserRepository') private readonly userRepository: UserRepository,
  ) { }

  async execute(
    userId: string,
    settingsUpdate: Partial<UserSettings>,
  ): Promise<UserSettings> {
    console.log('UpdateUserSettingsUseCase - Input:', {
      userId,
      settingsUpdate,
      notification_preferences: settingsUpdate.notification_preferences
    });

    // Buscar el user con settings
    const userAggregate = await this.userRepository.getMyProfile(userId);
    if (!userAggregate) {
      throw new NotFoundException(`User with id ${userId} not found`);
    }

    console.log('Current user aggregate:', {
      hasSettings: !!userAggregate.settings,
      currentSettings: userAggregate.settings
    });

    // If settings don't exist, create them with defaults
    if (!userAggregate.settings) {
      const defaultSettings = new UserSettings(
        '', // id will be generated by database
        userId,
        settingsUpdate.email_enabled ?? true,
        settingsUpdate.preferred_times ?? ['08:00', '14:00', '20:00'],
        settingsUpdate.timezone ?? 'UTC',
        settingsUpdate.notification_preferences ?? {
          email: true,
          sms: false,
          push: false,
          reminder_before: 15,
        },
        new Date(),
        new Date(),
      );

      console.log('Creating default settings:', defaultSettings);
      return await this.userRepository.updateSettings(userId, defaultSettings);
    }

    // Merge de campos que vienen para update
    const currentSettings = userAggregate.settings;

    // Ensure notification_preferences are properly structured
    let processedSettingsUpdate = { ...settingsUpdate };
    if (settingsUpdate.notification_preferences) {
      const defaultPrefs = {
        email: true,
        sms: false,
        push: false,
        reminder_before: 15,
      };

      processedSettingsUpdate.notification_preferences = {
        ...defaultPrefs,
        ...settingsUpdate.notification_preferences
      };
    }

    const updatedSettings = {
      ...currentSettings,
      ...processedSettingsUpdate,
      updated_at: new Date(),
    };

    console.log('Merged settings:', {
      current: currentSettings,
      update: settingsUpdate,
      result: updatedSettings
    });

    // Actualizar settings en repositorio
    const savedSettings = await this.userRepository.updateSettings(
      userId,
      updatedSettings,
    );

    console.log('Saved settings:', savedSettings);
    return savedSettings;
  }
}
